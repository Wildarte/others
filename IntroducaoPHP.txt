PHP Tutorial


PHP s a server scripting language, and a powerful tool for making dynamicand interactive web pages.
PHP is a widely-used, free, annd efficient alternative to competitors such as Microsoft's ASP.
PHP 7 is the latest stable release.


Introduction

PHP code is executed on the server.

What you should already know

PHP is an acronym for "PHP: Hypertext Preprocessor"
PHP is a widely-used, open source scripting language
PHP scripts are executed on the server
PHP is free to download and use

What is a php file?

php files can contain text, html, css, javascript, and php code
php code is executed on the server, and the result is returned on the browser as plain html
php files have extension .php

what can php do?

php can generate dynamic page content
php can create, open, read, write, delete, and close files on the server
php can collect form data
php can send and receive cookies
php can add, delete, modify data in your database
php can be used to control user-access
php can encrypt data

With phpyou are not limited to output html. You can output images, pdf file, and even flash movies.
You can also output any text, such as xhtml and xml.

Why PHP?

php runs on various platforms
php is compatible with almost all servers used today
php supports a wide range of data bases
php is free. download it from the official php resource: www.php.net
php is easy to learn and runs efficiently on the server side.


What's new in php 7

is much faster than the previous popular stable release
php 7 has improved error handling
php 6 supports stricker type declarations for function arguments
php 7 supports new operators (like the spaceship operator: <=>)


php installation

what do I need?

to start using php, you can:

find a web host with php and mysql support
install a web server on your own pc, and then install php and mysql

use a web host with php support

if yoir server has activaed support for php you do no nedd to do anything
Just create sme .php files, place them in your web directory, and the server will automatically parse them for you.
You do not nedd to compile anything or install any extra tools.
Because php is free, most web hosts offer php support

Set up php on your own pc

however, if your server does not support php, you must:

install a web server
install php
install a database, such as mysql



PHP Syntax

A php script is executed on the server, and the plain HTML result is sent back to the browser.

Basic PHP Syntax

A php script can be placed anywhere in the document.
A php script starts with <?php and ends with ?>

The default file extension for php files is .php
A php file normally contains html tags, and some php scripting code.
Below, we have an example of a simple php file, with a php script that uses a built-in php function echo to output the text hello world on a web page:

Note: Php statements end with a semicolon (;).

Php Case sensitivy

In php, NO keywords (e.g. if, else, while, echo etc.) classes, functions, and user-defined functios are case-sensitive.

In the example below, all three echo statements below are equal and legal:

Note: However; all variable names are case-sensitive!

Look at ht e example below; only the first statement will display the value of the $color variable! The is because $color, $COLOR, and $coLOR are trated as three different variables.

PHP variables

Variables are containers for storing information.

Creating (Declaring) PHP variables

In php, a variable starts with the $ sign, followed by name oof the variable:

$txt = "Hello World!";
$x = 5;
$y = 10.5;


PHP Variables

Rules for PHP variables

- A variable starts with the $ sign, followed by the name of the variable
- A variable name must start with a letter or the underscore character
- A variable name cannot start start with a number
- A variable name can only contain alpha-numeric characters and under.
Variables names are case-sentive

PHP variable are case-sensitive.

Output variables

The PHP echo statement is often used to output data to the screen.
The following example will show how to output text and a variable:

PHP is a Loosely typed language

In the example above, notice that we did not have to tell php which data type the variable is.
PHP automatically associates a data type to the variable,depending on its value. Since the data types are not set in a strict sense, yu can do things like adding a string to an integer without ausing an error.
In php 7, type decalration were added. This gives an option to specify the data type exepcted when declaring a functionm and by enabling the strict requeriment, it will thow a "Fatal Error" on a type mismatch.
You will learn more about strict and non-strict requeriments, and data type declarations in the php functions chapter.

php variables scope

In php, variables can be declared anywhere in the script.
The scope of a variable is the part off the script where the variable can be referenced/used.
PHP has three different variables scopes:

- local
- global
- static


Global and local scope

A variable declared outside a function has a GLOBAL SCOPE and can only be accessed outside a function:

Example

variable with global scope:

You can have local variables with the same name in different functions, because local variables are only recognized by the function in which they are declared.

PHP the global keyword

The lobal keyword is used to access a global variable from within a function.
To do this, use the global keyword before the variables (inside the function):


PHP also stores all global variables in an array called $GLOBALS[index].

<?php
    $x = 5;
    $y = 10;
    
function myTest(){
    $GLOBALS['y'] = $GLOBALS['x'] + $GLOBALS['y'];
}

myTest();
echo $y;



PHP the static keyword

Normally, when a function is completed/executed, all of its variables are deleted. However, sometimes we want a local variable NOT to be deleted. We need it for a further job.

To do this, use the static keyword when you first declare the variable:

PHP echo and print Statements

With php, there are two basic ways to get output: echo and print.
In this tutorial we use echo or print in almost every example. So, this chapter contains a little more info about those two output statements.

echo and print are more or less the same. Theyy are both used to output data to the screen.

The differences are small: echo has no return value while print has a return value of 1 so it can be used in expressions. echo can take multiple parameters (although such usage is rare) while print can take one argument. echo is marginally faster than print.

The php echo statement

The echo statement can be used with or without parentheses: echo or echo().

Display Text

The following example shows how to output text with the echo command (notice that the text can contain HTML markup):


The PHP print statement

The print statement can be used with or without parentheses: print or print().

Display Text

The following example shows how to output text with print command (notice that the text can contain HTML markup):


PHP Data types



Variables can store data of different types, and differents data types can do different things.

PHP supports the following data types:

String
Integer
Float
Boolean
Array
Object
NULL
Resource

PHP object

An object is a data type which stores data and informaton on how ot process that data.
In php, an object must be explicity declared.
First we must declared a class of object. For this, we use the class keyword. A class is a structure that can contain properties and methods:


PHP Strings

A string is a sequence of characters, like "Hello World!".

PHP String Functions

The PHP strlen() function returns the length of a string.

Example:

Return the length of the string "Hello world!":

str_word_count() - Count word in a String

The PHP str_word_count() function counts the number of words in a string.

Example

echo str_word_count("Hello world!");

strrev() - Reverse String

The PHP strrev() function reverses a string.

strpos() - Search For a text within a string

The PHP strpos() function searches for a specific text within string. If  a match is found, the function returns the character position off the first match. If no match is found, it will return FALSE.


str_replace() - Replace Text Within a String

The PHP str_replace() function replaces some characteres with some other characters in a string.


PHP Numbers

In this chapter we will look in depth into integers, Floats, and Number Strings.


PHP NaN

NaN stands fr Not a Number
NaN is used for impossible mathmatical operations.
PHP has the following functions to check if a value is not a number:

is_nan()

However, the PHP var_dump() function returns the data typ and value:


PHP Constants

Constantes are like variavles except that once they are defined they cannot be changed or undefined.

PHP Constants

A constant is an identifier (name) for a simple value. The value cannot be changed during the script.
A valid constant name starts with a letter or underscore (no $ sign before the constant name).
Note: Unlike variables, constants are automatically global across the entire script.

Create a PHP Constant

To create a constant, use the define() function.

Syntax

define(name, value, case-insensitive).

Example:

Create a constant with a case-sensitive name:

define("GREETING", "Welcome to w3schools.com");
echo GREETING;

const are automatically global and can be used across the entire script.


PHP Operators

Operators are used to perform operations on variables nd values.

PHP divides the operators in the following group:


PHP Arithmetic Operators

The PHP arithmetic operators are used with numeric values to perform common arithmetical operations, such as addition, sutraction, multiplication etc.

$x + $y
...

PHP Assignment Operators

The php assignment operators are used with numeric values to write a value to a variable.

The basic assignment operator in PHP is "=". It means that the left operand gets e to the value of the assignment expression on the right.

PHP Comparison Operators

The PHP comparators are used to compare two values (number or things)

$x == $y (returns true if $x is equal to $y)
$x === $y (returns true if $x is equal to $y, and they are of the same type)
$x != $y (returns true if $x is not equal to $y)

PHP Increment/Decrement Operators

The PHP increment operators are used to increment a variable's value.The php decrement operators are used to decrement a variable's value.

++$x Pre-increment (increments $x by ne, then returns $x)
$x++ Post-incremnt (returns $x, then increments $x by one)
--$x pre-decrement (derements $x by one, the returns $x)
$x-- post-decrement (returns $x, then decrements $x by one)

PHP Strings Operators

PHP has two operators that are specially designed for strings.

. Concatenation
= Concatenation assignment Ex. $txt1 = $txt2 (Appends $txt2 to $text1)

PHP Array Operators

The php array operators are used to compare arrays



PHP Conditional Assignment Operators

The php conditional assignment operators are used a value depending on conditions:

?: Ternary Ex. $x = expr1 ? expr2 : expr3
?? Null coalescing

PHP Switch statement

The switch statement is used to perform different actions based on different conditions.

The php switch statement

Use the switch statement to selec on of many blocks of code to be executed.


PHP Loops

In the following chapters you will learn how to repeat code by using loops in PHP.

PHP Loops

Often when you write code, you want the same block of code o run over and over again a certain number of times. So, instead f adding several almost equal code-lines in a script, we can use loops.

Loops are used t execute the same block of code again, as long as certain condition is true.

In php, we have the following loop types:

while
do...while
for
foreach

PHP foreach loop

The foreach loop - Loops through a block of code or each element in an array.

The PHP foreach loop

the foreach loop works only on arrays, and is used to loop through each key/value pair in an array.

Syntax

foreach($array as $value){
    code to be executed;
}

For every loop iteration, the value of the current array element is assigned to $value and the array pointer is moved by one, until it reaches the last array element.

Examples:

The followin example will output the values of theggiven array($colors):

Example:

<?php
    $colors = array("red", "green", "blue", "yellow");

    foreach($colors as $value){
        echo "$value <br>";
    }
?>


The following example will output both the keys and the values of the given array($age):

Example:

<$php

    $age = array("Peter"=>"35", "Ben"=>"37", "Joe"=>"43");

    foreach($age as $x => $val){
        echo "$x = $val<br>";
    }

?>

PHP Functions

The real power of PHP comes from its functions.
PHP has more than 1000 built-in functions, and in addition you can create your own custom functions.

PHP built-in functions

php has over 1000 built-in functions that can be called directly, from within a script, t perform a specific task.
Please check out our PHP reference fora complete overview of the PHP built-in functions.

php user defined functions

Besides the built-in php functions, it is possible to create your own functions

A function is a block of statements that can be used repeateadly in a program.
A function will not execute automatically when a page loads.
A function will be executed by a call to the function.

Create a user defined function in php

A user-defined function declaration starts with the word function:

Syntaxe

function functionName(){
    code to be executed;
}

PHP functions arguments

Information can be passed to functions through argument. An arguments is just like a variable.

The following example has a function with two arguments ($fname and  $year):


PHP Default argument Value

The following example shows how to use a default parameter. If we call the function setHeight() without arguments it takes the default value as argument:

PHP functions - returning values

To let a function return a value, use the return statement:

Example:

function sum(int $x, int $y){
    $z = $x + $y;
    return $z;
}

echo "5 + 10 = " . sum(5, 10) . "<br>";
echo "7 + 13 = " . sum(7, 13) . "<br>";
echo "2 + 4 = " . sum(2, 4);

PHP Return type decalrations

PHP 7 also supports type declaratins for the return statement. Like with the type declaration form function arguments, by enabling the strict requeriment, it will throw a "Fatal Error" on a type mismatch.

To declare a type for the function return, add a colun (:) and the type right before the opening curly ({) bracket when declaring the function.

In the following example we specify the return type for the function:


PHP Arrays

An array stores multiple values in one single variable:

What is an array?

An array is a variable, which can hold more than one value at a time.

If you have a list of items (a list of car names, for example), sotrins the cars in single variables could look like this.


PHP Associative Arrays

Associative arrays are arrays that use named keys you assign to them.

There are two ways to create an associative array:
$age = array("Peter"=>"35", "Ben"=>"37", "Joe"=>"43");

$age['Peter'] = "35";
$age['Ben'] = "37";
$age['Joe'] = "43";

The named keys can then be used in a script:

Loop Through an Associative Array

$age = array("Peter"=>"35", "Ben"=>"37", "Joe"=>"43");

foreach($age as $$x => $x_value){
    echo "key" . $x . ", value=". $x_value;
    echo "<br>;
}

?>

PHP - Sort Functions For Arrays

In this chapter, we will go through the following php array sort functions:

sort() - sort arrays in ascending order
rsort() - sort arrays in descending order
asort() - sort associeative arrays in ascending order, according to the value
ksort() - sort associative arrays in ascending order, acording to the value
arsort() - sort associative arrays in descending order, according to the value
krsort() - sort associatie arrays i descending order, according to the key

PHP global variables - superglobals

Superglobals were introduced in php and are built-in variables that are always available in all scopes.

php global variables - superglobals

Some predefined variables in php are "superglobals", which means that they are always accessible, regardless of scope - and you can access them form any function, class or file without having to do anything special.

the php superglobal variables are:

$GLOBALS
$_SERVER
$_REQUEST
$_POST
$_GET
$_FILES
$_ENV
$_COOKIE
$_SESSION

$GLOBALS

$GLOBALS is a php super global variable which is used to access global variables from anywhere in the php script (also from whithin functions or methods).

php stores all global variables in an array called $GLOBALS[index]



php frms - validade e-mail and url

this chapter shows how to validate names, e-mails and URLs.

php - validate name

the code bbelow shows a simple way to check if the name field only contains letter and whitespace. If the value of the name field id not valid, then store an erroe message:



$name = test_input($_POST['name']);
if(!preg_math("/^[a-zA-Z]*$/",$name)){
    $nameErr = "only letters and white space allowed";
}

the preg_match() function searches a string for pattern, returning true if the pattern exists, and false otherwise.

preg_match() function = perform a regular expression match.

Searches subject for a match to the regular expression given in pattern.

vamos usar um exmplo para entender a função preg_match()

"Casa com a palavra exemplo"

queremos encontrar a string:

"exemplo"

A função pre_match() aceita 5 parâmetros sendo os dois primeiros obrigatórios.

$pattern = "/exemplo/";
$subject = "Casa com a palavra exemplo";
$matches = array();

$resultado = preg_match($pattern, $subject, $matches);
var_dump($resultado, $matches);



PHP - validate E-mail

The easiest and safest way to check wheter an email address is well-formed is to use PHP's filter_var() function
deded


PHP - validate URL

Te code below shows a way to check if a address sytax is valid (this regular expression also allows dashes in the URL). If the URL address syntaxe is not valid, then store an error message:

$website = test_input($_POST['wesite']);
if(!preg_match("/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-

